/* Generated By:JJTree&JavaCC: Do not edit this line. CLParser.java */
import java.util.Scanner;

public class CLParser/*@bgen(jjtree)*/implements CLParserTreeConstants, CLParserConstants {/*@bgen(jjtree)*/
  protected JJTCLParserState jjtree = new JJTCLParserState();public static SymbolTable symbolTable = new SymbolTable();  // Global symbol table
    private StringBuilder parseTree = new StringBuilder();  // For building the parse tree output
    private int indentLevel = 0;  // To manage indentation for printing

    public static void main(String[] args) {
        try {
            CLParser parser = new CLParser(System.in);  // Create parser with input from System.in
            parser.startProgram();  // Start parsing
            System.out.println("Program parsed successfully.");
            System.out.println(parser.getParseTree());  // Print the parse tree
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public String getParseTree() {
        return parseTree.toString();  // Return the constructed parse tree
    }

    private void indent() {
        for (int i = 0; i < indentLevel; i++) {
            parseTree.append("\u2502   ");
        }
    }

    private void increaseIndent() {
        indentLevel++;
    }

    private void decreaseIndent() {
        indentLevel--;
    }

    private void appendToParseTree(String text) {
        indent();  // Handle indentation
        parseTree.append(text).append("\u005cn");  // Append the text to the parse tree
    }

  final public void startProgram() throws ParseException {
 /*@bgen(jjtree) startProgram */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_PROGRAM);
        appendToParseTree("startProgram");
        increaseIndent();  // Indent when starting program block

      variablesBlock();
        appendToParseTree("variablesBlock");
      codeBlock();
        appendToParseTree("codeBlock");
      jj_consume_token(END_PROGRAM);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
        appendToParseTree("endProgram");
        decreaseIndent();  // Decrease indentation when ending program block

    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void variablesBlock() throws ParseException {
 /*@bgen(jjtree) variablesBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VARIABLES);
        appendToParseTree("VARIABLES");
        increaseIndent();  // Indent when starting variables block

      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        variableDeclaration();

      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        decreaseIndent();  // Decrease indentation after variables block

    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void codeBlock() throws ParseException {
 /*@bgen(jjtree) codeBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTCODEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CODE);
        appendToParseTree("CODE");
        increaseIndent();  // Indent when starting code block

      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        statement();

      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        decreaseIndent();  // Decrease indentation after code block

    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void variableDeclaration() throws ParseException {
 /*@bgen(jjtree) variableDeclaration */
    SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token id;
    Object value;
    try {
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        value = jj_consume_token(INTEGER);
        // Adding variable to symbol table as INTEGER
        symbolTable.addVariable(id.image, SymbolTable.Type.INTEGER, Integer.parseInt(((Token)value).image));
        appendToParseTree("variableDeclaration -> IDENTIFIER (" + id.image + ") ASSIGN (=) INTEGER (" + value + ")");
        break;
      case FLOAT:
        value = jj_consume_token(FLOAT);
        // Adding variable to symbol table as FLOAT
        symbolTable.addVariable(id.image, SymbolTable.Type.FLOAT, Float.parseFloat(((Token)value).image));
        appendToParseTree("variableDeclaration -> IDENTIFIER (" + id.image + ") ASSIGN (=) FLOAT (" + value + ")");
        break;
      case STRING:
        value = jj_consume_token(STRING);
        // Adding variable to symbol table as STRING
        symbolTable.addVariable(id.image, SymbolTable.Type.STRING, ((Token)value).image);
        appendToParseTree("variableDeclaration -> IDENTIFIER (" + id.image + ") ASSIGN (=) STRING (\u005c"" + value + "\u005c")");
        break;
      case CHAR:
        value = jj_consume_token(CHAR);
        // Adding variable to symbol table as CHAR
        symbolTable.addVariable(id.image, SymbolTable.Type.CHAR, ((Token)value).image.charAt(1));  // Only take the character between single quotes
        appendToParseTree("variableDeclaration -> IDENTIFIER (" + id.image + ") ASSIGN (=) CHAR ('" + value + "')");
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
    SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token id;
    Object exprValue;
    try {
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      exprValue = expression();
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        // Updating variable in symbol table
        if (symbolTable.isDeclared(id.image)) {
            symbolTable.updateVariable(id.image, exprValue);  // Update variable in symbol table
            appendToParseTree("statement -> IDENTIFIER (" + id.image + ") ASSIGN (=) EXPRESSION");
        } else {
            {if (true) throw new ParseException("Variable " + id.image + " not declared.");}
        }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Object expression() throws ParseException {
 /*@bgen(jjtree) expression */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Object left, right;
    try {
      left = term();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          right = term();
                                left = (Float)left + (Float)right;
          break;
        case MINUS:
          jj_consume_token(MINUS);
          right = term();
                                 left = (Float)left - (Float)right;
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return left;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object term() throws ParseException {
 /*@bgen(jjtree) term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Object left, right;
    try {
      left = factor();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          right = factor();
                                      left = (Float)left * (Float)right;
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          right = factor();
                                    left = (Float)left / (Float)right;
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return left;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object factor() throws ParseException {
 /*@bgen(jjtree) factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token id;
    Object value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        id = jj_consume_token(INTEGER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
            appendToParseTree("factor -> INTEGER (" + id.image + ")");
            {if (true) return Integer.parseInt(id.image);}
        break;
      case FLOAT:
        id = jj_consume_token(FLOAT);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
            appendToParseTree("factor -> FLOAT (" + id.image + ")");
            {if (true) return Float.parseFloat(id.image);}
        break;
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
            // Return variable value from the symbol table
            if (symbolTable.isDeclared(id.image)) {
                appendToParseTree("factor -> IDENTIFIER (" + id.image + ")");
                {if (true) return symbolTable.getVariable(id.image);}
            } else {
                {if (true) throw new ParseException("Variable " + id.image + " not declared.");}
            }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x3c00,0x30000,0x30000,0xc0000,0xc0000,0xe00,};
   }

  /** Constructor with InputStream. */
  public CLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CLParser(CLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
